let board=Array(9).fill().map((()=>Array(9).fill(""))),metaBoard=Array(3).fill().map((()=>Array(3).fill(null))),currentPlayer="◯",lastMove=null,secondLastMove=null,gameOver=!1,boardElement=document.getElementById("game-board"),statusElement=document.getElementById("status"),gameMode=document.getElementById("game-mode").value;function createBoard(){createSmallBoardBorders(),boardElement.innerHTML="";for(let e=0;e<9;e++)for(let t=0;t<9;t++){const r=document.createElement("div");r.classList.add("cell"),r.dataset.row=e,r.dataset.col=t,r.addEventListener("click",handleMove),boardElement.appendChild(r)}}function makeMove(e,t){board[e][t]=currentPlayer;const r=document.getElementsByClassName("cell");for(let o of r)if(parseInt(o.dataset.row)===e&&parseInt(o.dataset.col)===t){o.textContent=currentPlayer,o.classList.add("◯"===currentPlayer?"occupied-o":"occupied-x");break}secondLastMove=lastMove,lastMove={row:e,col:t};let o=getWinningSequence(e,t,currentPlayer);if(o)return displayWinningLine("overall",o),statusElement.textContent=`${currentPlayer} の勝ち！（全体5目揃え）`,void(gameOver=!0);let a=Math.floor(e/3),n=Math.floor(t/3);if(null===metaBoard[a][n]){let e=checkMiniWin(a,n);if(e){metaBoard[a][n]=e,displayLargeMark(a,n,e);let t=getMetaWinningSequence(e);if(t)return displayWinningLine("meta",t),statusElement.textContent=`${e} の勝ち！（大きな印3つ揃え）`,void(gameOver=!0)}}currentPlayer="◯"===currentPlayer?"✕":"◯",statusElement.textContent="ai"===gameMode?"◯"===currentPlayer?"あなた（◯）の番です":"コンピュータ（✕）の番です":"◯"===currentPlayer?"プレイヤー1 (◯) の番です":"プレイヤー2 (✕) の番です",gameOver||"ai"!==gameMode||"✕"!==currentPlayer||computerMove()}function computerMove(){if(gameOver)return;let e={board:board.map((e=>e.slice())),metaBoard:metaBoard.map((e=>e.slice())),currentPlayer:currentPlayer,lastMove:lastMove?{...lastMove}:null,secondLastMove:secondLastMove?{...secondLastMove}:null,gameOver:gameOver},{move:t}=minimax(e,SEARCH_DEPTH,-1/0,1/0,!0);t?makeMove(t.row,t.col):(statusElement.textContent="引き分け！",gameOver=!0)}function createSmallBoardBorders(){let e=document.getElementsByClassName("small-board");for(;e[0];)e[0].parentNode.removeChild(e[0]);for(let e=0;e<3;e++)for(let t=0;t<3;t++){const r=document.createElement("div");r.classList.add("small-board"),r.style.top=150*e+"px",r.style.left=150*t+"px",r.id=`meta-${e}-${t}`,document.querySelector(".board-container").appendChild(r)}}function handleMove(e){if(gameOver)return;const t=parseInt(e.target.dataset.row),r=parseInt(e.target.dataset.col);""!==board[t][r]||secondLastMove&&!isValidMove(t,r,secondLastMove)||makeMove(t,r)}function isValidMove(e,t,r){return!r||!(Math.floor(e/3)===Math.floor(r.row/3)&&Math.floor(t/3)===Math.floor(r.col/3))}function getWinningSequence(e,t,r){const o=[[[-1,0],[1,0]],[[0,-1],[0,1]],[[-1,-1],[1,1]],[[-1,1],[1,-1]]];for(let[[a,n],[l,c]]of o){let o=[{row:e,col:t}],i=e+a,d=t+n;for(;i>=0&&i<9&&d>=0&&d<9&&board[i][d]===r;)o.unshift({row:i,col:d}),i+=a,d+=n;for(i=e+l,d=t+c;i>=0&&i<9&&d>=0&&d<9&&board[i][d]===r;)o.push({row:i,col:d}),i+=l,d+=c;if(o.length>=5)return o}return null}function getMetaWinningSequence(e){for(let t=0;t<3;t++){if(metaBoard[t][0]===e&&metaBoard[t][1]===e&&metaBoard[t][2]===e)return[{r:t,c:0},{r:t,c:1},{r:t,c:2}];if(metaBoard[0][t]===e&&metaBoard[1][t]===e&&metaBoard[2][t]===e)return[{r:0,c:t},{r:1,c:t},{r:2,c:t}]}return metaBoard[0][0]===e&&metaBoard[1][1]===e&&metaBoard[2][2]===e?[{r:0,c:0},{r:1,c:1},{r:2,c:2}]:metaBoard[0][2]===e&&metaBoard[1][1]===e&&metaBoard[2][0]===e?[{r:0,c:2},{r:1,c:1},{r:2,c:0}]:null}function checkMiniWin(e,t){let r=3*e,o=3*t,a=[];for(let e=0;e<3;e++){a[e]=[];for(let t=0;t<3;t++)a[e][t]=board[r+e][o+t]}for(let e=0;e<3;e++){if(a[e][0]&&a[e][0]===a[e][1]&&a[e][1]===a[e][2])return a[e][0];if(a[0][e]&&a[0][e]===a[1][e]&&a[1][e]===a[2][e])return a[0][e]}return a[0][0]&&a[0][0]===a[1][1]&&a[1][1]===a[2][2]?a[0][0]:a[0][2]&&a[0][2]===a[1][1]&&a[1][1]===a[2][0]?a[0][2]:null}function displayLargeMark(e,t,r){let o="✕"===r?"black":"red";document.getElementById(`meta-${e}-${t}`).innerHTML=`<div class="large-mark" style="color:${o}">${r}</div>`}function displayWinningLine(e,t){let r,o,a,n,l=document.querySelector(".board-container"),c=document.createElement("div");if(c.classList.add("winning-line"),"overall"===e){let e=25,l=t[0],c=t[t.length-1],i=50*l.col+25,d=50*l.row+25,s=50*c.col+25,u=50*c.row+25,m=s-i,f=u-d,M=Math.sqrt(m*m+f*f),v=m/M,g=f/M;r=i-v*e,o=d-g*e,a=s+v*e,n=u+g*e}else if("meta"===e){let e=75,l=t[0],c=t[t.length-1],i=150*l.c+75,d=150*l.r+75,s=150*c.c+75,u=150*c.r+75,m=s-i,f=u-d,M=Math.sqrt(m*m+f*f),v=m/M,g=f/M;r=i-v*e,o=d-g*e,a=s+v*e,n=u+g*e}let i=a-r,d=n-o,s=Math.sqrt(i*i+d*d),u=180*Math.atan2(d,i)/Math.PI;c.style.width=`${s}px`,c.style.transform=`rotate(${u}deg)`,c.style.left=`${r}px`,c.style.top=`${o}px`,l.appendChild(c)}document.getElementById("game-mode").addEventListener("change",(()=>{gameMode=document.getElementById("game-mode").value,init()}));const SEARCH_DEPTH=3;function cloneState(e){return{board:e.board.map((e=>e.slice())),metaBoard:e.metaBoard.map((e=>e.slice())),currentPlayer:e.currentPlayer,lastMove:e.lastMove?{...e.lastMove}:null,secondLastMove:e.secondLastMove?{...e.secondLastMove}:null,gameOver:e.gameOver}}function simulateMove(e,t,r){let o=cloneState(e);o.board[t.row][t.col]=r,o.secondLastMove=o.lastMove,o.lastMove={row:t.row,col:t.col};let a=Math.floor(t.row/3),n=Math.floor(t.col/3);if(null===o.metaBoard[a][n]){let e=checkMiniWin_(a,n,o.board);e&&(o.metaBoard[a][n]=e)}return o.currentPlayer="◯"===r?"✕":"◯",o}function checkMiniWin_(e,t,r){let o=3*e,a=3*t,n=[];for(let e=0;e<3;e++){n[e]=[];for(let t=0;t<3;t++)n[e][t]=r[o+e][a+t]}for(let e=0;e<3;e++){if(n[e][0]&&n[e][0]===n[e][1]&&n[e][1]===n[e][2])return n[e][0];if(n[0][e]&&n[0][e]===n[1][e]&&n[1][e]===n[2][e])return n[0][e]}return n[0][0]&&n[0][0]===n[1][1]&&n[1][1]===n[2][2]?n[0][0]:n[0][2]&&n[0][2]===n[1][1]&&n[1][1]===n[2][0]?n[0][2]:null}function getMetaWinningSequenceFromMeta(e,t){for(let r=0;r<3;r++){if(e[r][0]===t&&e[r][1]===t&&e[r][2]===t)return!0;if(e[0][r]===t&&e[1][r]===t&&e[2][r]===t)return!0}return e[0][0]===t&&e[1][1]===t&&e[2][2]===t||e[0][2]===t&&e[1][1]===t&&e[2][0]===t}const directions=[[[0,1],[0,-1]],[[1,0],[-1,0]],[[1,1],[-1,-1]],[[1,-1],[-1,1]]];function potentialForCell(e,t,r,o){let a=0;for(let[[n,l],[c,i]]of directions){let d=1,s=t+n,u=r+l;for(;s>=0&&s<9&&u>=0&&u<9&&e[s][u]===o;)d++,s+=n,u+=l;for(s=t+c,u=r+i;s>=0&&s<9&&u>=0&&u<9&&e[s][u]===o;)d++,s+=c,u+=i;2===d?a+=20:3===d?a+=200:4===d&&(a+=5e3)}return a}function evaluatePotential(e,t){let r=0;for(let o=0;o<9;o++)for(let a=0;a<9;a++)""===e[o][a]&&(r+=potentialForCell(e,o,a,t));return r}function evaluateState(e){if(getMetaWinningSequenceFromMeta(e.metaBoard,"✕"))return 1e4;if(getMetaWinningSequenceFromMeta(e.metaBoard,"◯"))return-1e4;let t=0,r=0;for(let o=0;o<9;o++)for(let a=0;a<9;a++)"✕"===e.board[o][a]?t++:"◯"===e.board[o][a]&&r++;return 10*(t-r)+(evaluatePotential(e.board,"✕")-evaluatePotential(e.board,"◯"))}function checkMiniWinState(e,t,r){let o=3*e,a=3*t,n=[];for(let e=0;e<3;e++){n[e]=[];for(let t=0;t<3;t++)n[e][t]=r[o+e][a+t]}for(let e=0;e<3;e++){if(n[e][0]&&n[e][0]===n[e][1]&&n[e][1]===n[e][2])return n[e][0];if(n[0][e]&&n[0][e]===n[1][e]&&n[1][e]===n[2][e])return n[0][e]}return n[0][0]&&n[0][0]===n[1][1]&&n[1][1]===n[2][2]?n[0][0]:n[0][2]&&n[0][2]===n[1][1]&&n[1][1]===n[2][0]?n[0][2]:null}function cloneState(e){return{board:e.board.map((e=>e.slice())),metaBoard:e.metaBoard.map((e=>e.slice())),currentPlayer:e.currentPlayer,lastMove:e.lastMove?{...e.lastMove}:null,secondLastMove:e.secondLastMove?{...e.secondLastMove}:null,gameOver:e.gameOver}}function simulateMove(e,t,r){let o=cloneState(e);o.board[t.row][t.col]=r,o.secondLastMove=o.lastMove,o.lastMove={row:t.row,col:t.col};let a=Math.floor(t.row/3),n=Math.floor(t.col/3);if(null===o.metaBoard[a][n]){let e=checkMiniWinState(a,n,o.board);e&&(o.metaBoard[a][n]=e)}return o.currentPlayer="◯"===r?"✕":"◯",o}function getValidMoves(e){let t=[];for(let r=0;r<9;r++)for(let o=0;o<9;o++)""!==e.board[r][o]||e.secondLastMove&&Math.floor(r/3)===Math.floor(e.secondLastMove.row/3)&&Math.floor(o/3)===Math.floor(e.secondLastMove.col/3)||t.push({row:r,col:o});return t}function minimax(e,t,r,o,a){let n=getValidMoves(e);if(0===t||0===n.length)return{score:evaluateState(e)};if(a){let a=-1/0,l=null;for(let c of n){let n=minimax(simulateMove(e,c,"✕"),t-1,r,o,!1);if(n.score>a&&(a=n.score,l=c),o<=(r=Math.max(r,n.score)))break}return{score:a,move:l}}{let a=1/0,l=null;for(let c of n){let n=minimax(simulateMove(e,c,"◯"),t-1,r,o,!0);if(n.score<a&&(a=n.score,l=c),(o=Math.min(o,n.score))<=r)break}return{score:a,move:l}}}function init(){let e=document.querySelector(".board-container").getElementsByClassName("winning-line");for(;e[0];)e[0].parentNode.removeChild(e[0]);board=Array(9).fill().map((()=>Array(9).fill(""))),metaBoard=Array(3).fill().map((()=>Array(3).fill(null))),currentPlayer="◯",lastMove=null,secondLastMove=null,gameOver=!1,boardElement=document.getElementById("game-board"),statusElement=document.getElementById("status"),createBoard(),statusElement.textContent="ai"===gameMode?"あなた（◯）の番です":"プレイヤー1 (◯) の番です"}let resetButton=document.getElementById("reset-btn");resetButton.addEventListener("click",init),init();